Quiero que dise√±es y generes una herramienta de arbitraje descentralizado avanzada, robusta, profesional y funcional, llamada ‚ÄúARBITRAGEX SUPREME V3.6‚Äù.

‚úÖ El objetivo es crear un sistema completo, ejecutable y modular que combine frontend, backend, l√≥gica de arbitraje y despliegue automatizado, completamente a prueba de auditor√≠as t√©cnicas rigurosas.

üß† Quiero que el sistema supere los 7 niveles de auditor√≠a extrema, por lo tanto, debes tener en cuenta:

1. **Infraestructura y Deploy:** Debe poder desplegarse desde cero en una m√°quina limpia (Windows, Linux o Mac), usando scripts idempotentes, seguros y cross-platform. Debe usar Docker Compose correctamente, con servicios saludables y ports din√°micos si es necesario.

2. **Integridad del C√≥digo:** Todo el c√≥digo debe compilar correctamente (Rust, Node.js, TypeScript, etc). Debe tener estructura clara, modular, limpia, y con tests que pasen. Usa pr√°cticas modernas (async/await, ESM, Rust idiom√°tico, etc).

3. **Seguridad y Privacidad:** Las claves privadas deben gestionarse de forma segura (usando vaults, cifrado, o variables de entorno encriptadas). Nunca deben almacenarse en texto plano. La comunicaci√≥n entre microservicios debe tener autenticaci√≥n si es necesario. Usa HTTPS en producci√≥n. Aplica validaciones estrictas de entrada.

4. **L√≥gica de Negocio Real:** El motor debe detectar oportunidades reales de arbitraje en cadenas EVM. Implementa un m√≥dulo en Rust o TypeScript que interact√∫e con RPCs, lea pools de liquidez, simule rutas y calcule EV/ROI. No uses datos simulados ni hardcodeados.

5. **Observabilidad y Logs:** Debe exponer m√©tricas Prometheus √∫tiles (`ev_total_usd`, `flashloan_success`, etc), usar logs estructurados (JSON) y permitir integraci√≥n con Grafana o Loki para trazabilidad total.

6. **Idempotencia y Mantenibilidad:** Todo debe poder ejecutarse m√∫ltiples veces sin corromper estado. Usa patrones seguros en tus scripts, aseg√∫rate que no hay sobrescritura destructiva. Usa git pull inteligente, migraciones reversibles, etc.

7. **Generaci√≥n de Ganancias:** Debe tener un flujo completo que identifique una oportunidad, construya la transacci√≥n de flashloan, la simule y ‚Äîen caso positivo‚Äî la firme y ejecute en testnet (Goerli, Sepolia, etc). El sistema debe mostrar resultados: ganancia esperada, riesgo, gas fees, y balance final.

üî® Tecnolog√≠as sugeridas (puedes adaptar seg√∫n conveniencia):
- Backend core en Rust (axum, tokio, sqlx)
- API intermedia en Node.js (Express o Fastify)
- Frontend en Next.js 14 (App Router, Tailwind, TS)
- Base de datos PostgreSQL + Redis
- Observabilidad con Prometheus + Grafana
- Despliegue con Docker Compose
- Gesti√≥n de claves: HashiCorp Vault o alternativa segura

üéØ Entregables esperados:
- Script de despliegue 100% funcional (PowerShell y bash)
- Dockerfiles bien construidos (sin mounts inseguros ni flags obsoletos)
- C√≥digo backend y frontend limpio, modular, documentado y testeado
- Infraestructura autosuficiente, f√°cil de levantar y destruir
- Configuraci√≥n para ambientes dev, staging y prod
- Simulador real de oportunidades y ejecuci√≥n en testnet
- Buenas pr√°cticas de seguridad aplicadas

No simules que funciona. Que realmente funcione.

Genera la primera versi√≥n de esta herramienta excepcional, empezando por el dise√±o de la arquitectura, estructura de carpetas, y luego pasa a los scripts, backend, frontend y l√≥gica de arbitraje real.