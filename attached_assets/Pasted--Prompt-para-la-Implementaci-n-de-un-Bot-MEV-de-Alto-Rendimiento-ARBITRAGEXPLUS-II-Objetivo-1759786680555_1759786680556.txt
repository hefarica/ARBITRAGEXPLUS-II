# Prompt para la Implementación de un Bot MEV de Alto Rendimiento (ARBITRAGEXPLUS-II)

## Objetivo del Agente

Implementar un bot MEV (Maximal Extractable Value) de alto rendimiento, basado en el repositorio `ARBITRAGEXPLUS-II` (https://github.com/hefarica/ARBITRAGEXPLUS-II.git), con el objetivo de generar **millones de USD anuales con un costo operativo cercano a cero**, aprovechando las ineficiencias del mercado. El bot debe ser **100% funcional y productivo**, utilizando herramientas y tecnologías *open source* avanzadas, y adaptándose a todas las consideraciones detalladas en los documentos de auditoría, oportunidades, riesgos, plan de implementación, arquitectura y monitoreo.

## Contexto y Documentación de Referencia

Se han generado los siguientes documentos que contienen el análisis exhaustivo del proyecto `ARBITRAGEXPLUS-II` y la estrategia propuesta. El agente debe consultar y aplicar la información de todos estos documentos:

1.  **Auditoría Técnica Exhaustiva y Plan de Producción para ARBITRAGEXPLUS-II** (`auditoria_tecnica_arbitragexplus_v2.md`):
    *   Análisis del repositorio, componentes existentes y fortalezas.
    *   **Bloqueadores críticos** para la producción (quotes on-chain reales, ejecución atómica, motor de gas dinámico, simulación pre-envío, gobernanza de riesgo, persistencia, observabilidad, seguridad, infraestructura).
    *   Plan de trabajo en fases (Cimientos de Ejecución y Precisión, Robustez Operacional y Gestión de Riesgos, Observabilidad, Seguridad y Escalabilidad).
    *   Estrategias para "Costo Cero" y "Millones de USD" (maximización de ingresos, minimización de costos).

2.  **Oportunidades MEV y Estrategias de Capitalización en ARBITRAGEXPLUS-II** (`oportunidades_mev_capitalizacion.md`):
    *   Detalle de las oportunidades MEV identificadas: Arbitraje DEX, Liquidaciones, Ataques Sandwich, Arbitraje de Estables Puenteadas, y otras estrategias avanzadas (Arbitraje Triangular, JIT Liquidity).
    *   Mecanismos de capitalización y optimización: Latencia ultra-baja, ejecución atómica y privada (Flashbots/MEV-Share), predicción dinámica de gas y slippage, gestión de riesgos y capital, observabilidad.

3.  **Análisis de Riesgos y Mitigaciones para Bots MEV (ARBITRAGEXPLUS-II)** (`riesgos_mev_mitigaciones.md`):
    *   Identificación de riesgos técnicos (latencia insuficiente, fallos de ejecución, vulnerabilidades de contratos, gestión ineficiente del gas, slippage inesperado, dependencia de RPCs, errores de configuración).
    *   Identificación de riesgos de mercado (competencia intensa, cambios en el protocolo/red, volatilidad del mercado, riesgo regulatorio, ataques de red/censura, riesgo de contrato inteligente externo).
    *   Estrategias de mitigación detalladas para cada riesgo.

4.  **Plan de Implementación Paso a Paso para el Bot MEV (ARBITRAGEXPLUS-II) - Integrado con Riesgos y Mitigaciones** (`plan_implementacion_mev_bot_integrado.md`):
    *   Arquitectura de referencia del sistema MEV.
    *   Plan de implementación detallado en fases (Cimientos de Ejecución y Precisión, Robustez Operacional y Gestión de Riesgos, Observabilidad, Seguridad y Escalabilidad, Operación en Modo Sombra y Optimización Continua).
    *   Integración explícita de riesgos y mitigaciones en cada paso del plan.
    *   Consideraciones de infraestructura clave (VPS, nodos RPC, red, almacenamiento, seguridad de red).

5.  **Arquitectura Técnica del Bot MEV (ARBITRAGEXPLUS-II) - Actualizada con Estrategia de Arbitraje** (`arquitectura_tecnica_mev_bot_actualizada.md`):
    *   Visión general y componentes detallados de la arquitectura (Frontend, Rust MEV Engine con sus módulos, Contrato Executor, PostgreSQL, Redis Streams, Infraestructura de Red, Monitoreo y Alertas, Gestión de Secretos, CI/CD).
    *   Flujo de ejecución de una oportunidad MEV (ejemplo: Arbitraje DEX).

6.  **Estrategia de Arbitraje del Bot MEV (ARBITRAGEXPLUS-II)** (`estrategia_arbitraje_mev_bot.md`):
    *   Detalle de la estrategia de arbitraje DEX, incluyendo detección de oportunidades, cálculo de beneficios, ejecución atómica y privada, y optimización de ingresos.

7.  **Mecanismos de Monitoreo y Métricas Clave para el Bot MEV (ARBITRAGEXPLUS-II) en Producción** (`monitoreo_mev_bot.md`):
    *   Stack de monitoreo propuesto (Prometheus, Grafana, Alertmanager).
    *   Métricas clave (financieras, operacionales, de salud del sistema).
    *   Mecanismos de alerta y dashboards de Grafana.
    *   Mejores prácticas de monitoreo.

## Checklist de Implementación (100% Funcional y Productivo)

El agente debe seguir este checklist para adaptar y mejorar el repositorio `ARBITRAGEXPLUS-II` a un bot MEV de producción, garantizando la máxima rentabilidad y minimizando los costos.

### Fase 1: Cimientos de Ejecución y Precisión (Sprints 1-2)

- [ ] **1.1. Configuración del Entorno de Desarrollo:**
    - [ ] Configurar máquinas de desarrollo con Rust, Node.js, Foundry, Docker.
    - [ ] Clonar el repositorio `ARBITRAGEXPLUS-II` y todos los repositorios dependientes.
    - [ ] Asegurar que todos los scripts de configuración automatizados funcionen correctamente.
- [ ] **1.2. Implementación de Quotes On-Chain Reales:**
    - [ ] Desarrollar adaptadores robustos en `src/dex/*.rs` para Uniswap V2/V3, Solidly, Curve, Balancer, utilizando `ethers-rs`.
    - [ ] Implementar `QuoterV3` y fórmulas exactas (`sqrtPriceX96`, `ticks`, `virtual reserves`).
    - [ ] Validar la precisión de los quotes (< 5 bps vs. ejecución real) mediante *trades* de polvo y simulaciones on-chain.
    - [ ] Optimizar el código Rust para una latencia de quote < 25 ms.
- [ ] **1.3. Desarrollo del Contrato Ejecutor Atómico (`Executor.sol`):**
    - [ ] Escribir y auditar el contrato `Executor.sol` (Solidity) con lógica para encadenar 2-3 swaps, `Permit2/allowances`, y `revert-all`.
    - [ ] Realizar auditorías de seguridad por terceros y *fuzz tests* exhaustivos con Foundry.
    - [ ] Generar bindings `ethers-rs` para la interacción desde Rust.
- [ ] **1.4. Integración Flashbots/MEV-Share:**
    - [ ] Implementar el envío de *bundles* privados en Rust (`src/executor/flashbots.rs`).
    - [ ] Incluir `callBundle` para simulación previa de *bundles* y reintentos.
    - [ ] Configurar el módulo para operar en modo `shadow` (simulación) y `live` (envío).
    - [ ] Asegurar conexiones de baja latencia y redundancia a los *relays*.
- [ ] **1.5. CI/CD Básico:**
    - [ ] Configurar GitHub Actions para pruebas unitarias, `clippy`, `cargo audit`, `gitleaks` en el `rust-mev-engine`.
    - [ ] Configurar tests de Foundry para `Executor.sol` en el pipeline de CI/CD.
    - [ ] Asegurar que el CI esté 

verde en cada *commit* para los componentes clave.

### Fase 2: Robustez Operacional y Gestión de Riesgos (Sprints 3-4)

- [ ] **2.1. Motor de Gas y Slippage Dinámico:**
    - [ ] Desarrollar un módulo en Rust (`src/gas_predictor.rs`) para predecir dinámicamente el gas (EIP-1559 base + prioridad por latencia objetivo).
    - [ ] Implementar lógica para ajustar el `minOut` de forma adaptativa basado en la profundidad de liquidez y la volatilidad del mercado.
    - [ ] Validar que el desvío de gas sea < 15% y que el `minOut` optimice el P&L neto por operación.
- [ ] **2.2. Simulación Pre-Trade Avanzada:**
    - [ ] Integrar `eth_call` con estado *pending* o simulaciones Flashbots para validar *reverts*, impuestos de transferencia y tokens bloqueables antes del envío.
    - [ ] Asegurar que no haya transacciones fallidas por *revert* inesperado.
    - [ ] Implementar lógica de pre-validación en `src/pre_trade_check.rs`.
- [ ] **2.3. Gobernanza de Riesgo y Capital:**
    - [ ] Implementar *circuit-breakers* (límites de P&L diario/mensual) en `src/risk_manager.rs`.
    - [ ] Configurar listas blancas de tokens/DEX y presupuestos por cadena.
    - [ ] Implementar límites por *trade* y por minuto.
    - [ ] Desarrollar un sistema de deduplicación de oportunidades (`hash` + ventana temporal) utilizando Redis cache.
    - [ ] Asegurar que el P&L diario no caiga por debajo de un umbral definido (ej. -$200).
- [ ] **2.4. Persistencia y Colas Robustas:**
    - [ ] Configurar PostgreSQL para almacenar oportunidades, ejecuciones, P&L, gas y logs detallados.
    - [ ] Implementar Redis Streams para desacoplar el escáner del ejecutor, garantizando idempotencia y procesamiento *exactly-once*.
    - [ ] Asegurar que no se pierdan ni dupliquen oportunidades.
    - [ ] Desarrollar `db/schema.sql` y un worker de ejecución (`src/worker.rs`) que lea de Redis Streams.
- [ ] **2.5. Despliegue de Infraestructura Base:**
    - [ ] Provisionar un VPS de alto rendimiento (Ubuntu 22.04+, 8GB RAM, 4 CPUs, SSD NVMe).
    - [ ] Instalar y configurar PostgreSQL y Redis.
    - [ ] Configurar Docker y `docker-compose` para los servicios base.
    - [ ] Implementar firewalls y seguridad de red.

### Fase 3: Observabilidad, Seguridad y Escalabilidad (Sprints 5-6)

- [ ] **3.1. Observabilidad Completa:**
    - [ ] Implementar métricas Prometheus en el `rust-mev-engine` (`/metrics` endpoint).
    - [ ] Configurar Grafana para dashboards de rendimiento general, por estrategia, latencia, salud del sistema y transacciones.
    - [ ] Configurar Alertmanager para notificaciones críticas (Slack, Telegram, PagerDuty) con *runbooks* asociados.
    - [ ] Asegurar un MTTR (Mean Time To Recovery) < 30 min y 99.9% de *uptime*.
- [ ] **3.2. Seguridad de Grado Industrial:**
    - [ ] Integrar manejo de claves con HSM/Key vault (ej. AWS KMS, HashiCorp Vault).
    - [ ] Implementar separación de wallets (hot/cold) y ambientes (dev/stage/prod).
    - [ ] Realizar auditorías de seguridad continuas y *fuzz tests* con tokens de impuestos.
    - [ ] Asegurar 0 vulnerabilidades críticas reportadas.
- [ ] **3.3. Infraestructura Escalable y CI/CD Avanzado:**
    - [ ] Dockerizar todos los componentes del sistema (`Dockerfile`, `docker-compose.yml`).
    - [ ] Configurar CI/CD completo (`build`, `test`, `audit`, `secret-scan`, `deploy automático`).
    - [ ] Asegurar CI verde en cada *commit* y despliegue automatizado y rápido.
- [ ] **3.4. Optimización de Latencia de Red:**
    - [ ] Contratar múltiples proveedores de RPC premium de baja latencia.
    - [ ] Configurar *relays* de Flashbots/MEV-Share dedicados.
    - [ ] Considerar la co-ubicación de servidores para minimizar la latencia.

### Fase 4: Operación en Modo Sombra y Optimización Continua (Sprints 7+)

- [ ] **4.1. Operación en Modo Sombra:**
    - [ ] Ejecutar el bot en modo `shadow` durante 1-2 semanas para recopilar datos de P&L simulado, *hit-rate*, *slippage* real y consumo de gas.
    - [ ] Validar las estrategias en un entorno real sin riesgo de capital.
- [ ] **4.2. Análisis y Ajuste de Estrategias:**
    - [ ] Analizar los datos del modo sombra y ajustar umbrales de beneficio, parámetros de gas y lógica de *slippage*.
    - [ ] Refinar las estrategias MEV y realizar A/B testing.
- [ ] **4.3. Lanzamiento Controlado en Vivo:**
    - [ ] Iniciar la operación en vivo con capital limitado y umbrales de riesgo conservadores.
    - [ ] Monitorear de cerca el P&L real y las métricas.
- [ ] **4.4. Optimización Continua y Expansión:**
    - [ ] Escalar gradualmente el capital y expandir a nuevas cadenas/DEXs.
    - [ ] Desarrollar nuevas estrategias MEV y realizar A/B testing de forma continua.

## Consideraciones Adicionales para "Costo Cero" y "Millones de USD"

El agente debe tener en cuenta que "costo cero" se refiere a la maximización de la rentabilidad neta y la eficiencia del capital, no a la ausencia total de costos. Para lograr el objetivo de "millones de USD", se requiere:

*   **Maximización de Ingresos:**
    *   Implementar y optimizar las 13 estrategias MEV mencionadas en el `rust-mev-engine` (no solo arbitraje DEX).
    *   Expandir la operación a múltiples cadenas (Optimism, Polygon, BSC, Avalanche) y DEXs.
    *   Optimizar la latencia al máximo (RPCs dedicados, co-ubicación, *private relays*).
    *   Utilizar algoritmos como Bellman-Ford para optimizar rutas multi-hop y maximizar el beneficio por *trade*.
*   **Minimización de Costos:**
    *   Gestión eficiente del gas: pagar el gas justo, usar *gas tokens* si es rentable.
    *   Infraestructura optimizada: proveedores de RPCs eficientes, Docker/Kubernetes para uso de recursos.
    *   Prevención de transacciones fallidas: simulaciones pre-trade y ejecución atómica con `revert-all`.
    *   Monitoreo proactivo para reducir el tiempo de inactividad y pérdidas.

## Repositorio de GitHub

El agente debe trabajar con el repositorio base: `https://github.com/hefarica/ARBITRAGEXPLUS-II.git`

Este prompt y checklist son exhaustivos y deben guiar al agente en la implementación de un bot MEV altamente funcional, rentable y seguro, adaptado a las condiciones del mercado y las tecnologías actuales. ¡No falles en la ejecución de cada punto!
